# 7) Write an algorithm for implementation of circular linked list (using singly linked list) and perform certain operation (insertions, deletions, traversal).
class Node:
    """Class to represent a node in the circular linked list."""
    def __init__(self, data):
        self.data = data
        self.next = None


class CircularLinkedList:
    """Class to represent a circular linked list."""
    def __init__(self):
        self.head = None

    def traverse(self):
        """Traverse the circular linked list and print the elements."""
        if not self.head:
            print("The list is empty.")
            return
        current = self.head
        while True:
            print(current.data, end=" -> ")
            current = current.next
            if current == self.head:  # Stop when we've circled back to the head
                break
        print("(back to head)")

    def insert_at_beginning(self, data):
        """Insert a node at the beginning of the circular linked list."""
        new_node = Node(data)
        if not self.head:
            new_node.next = new_node  # Point to itself if it's the only node
            self.head = new_node
            return
        # Find the last node
        last = self.head
        while last.next != self.head:
            last = last.next
        new_node.next = self.head
        self.head = new_node
        last.next = self.head

    def insert_at_end(self, data):
        """Insert a node at the end of the circular linked list."""
        new_node = Node(data)
        if not self.head:
            new_node.next = new_node  # Point to itself if it's the only node
            self.head = new_node
            return
        # Find the last node
        last = self.head
        while last.next != self.head:
            last = last.next
        last.next = new_node
        new_node.next = self.head

    def insert_at_position(self, data, position):
        """Insert a node at a specific position in the circular linked list."""
        if position == 0:
            self.insert_at_beginning(data)
            return
        new_node = Node(data)
        current = self.head
        count = 0
        while count < position - 1 and current.next != self.head:
            current = current.next
            count += 1
        if count != position - 1:
            print("Position out of bounds.")
            return
        new_node.next = current.next
        current.next = new_node

    def delete_at_beginning(self):
        """Delete the first node in the circular linked list."""
        if not self.head:
            print("The list is empty. No node to delete.")
            return
        if self.head.next == self.head:  # Only one node in the list
            self.head = None
            return
        # Find the last node
        last = self.head
        while last.next != self.head:
            last = last.next
        self.head = self.head.next
        last.next = self.head

    def delete_at_end(self):
        """Delete the last node in the circular linked list."""
        if not self.head:
            print("The list is empty. No node to delete.")
            return
        if self.head.next == self.head:  # Only one node in the list
            self.head = None
            return
        current = self.head
        while current.next.next != self.head:
            current = current.next
        current.next = self.head

    def delete_at_position(self, position):
        """Delete a node at a specific position in the circular linked list."""
        if not self.head:
            print("The list is empty. No node to delete.")
            return
        if position == 0:
            self.delete_at_beginning()
            return
        current = self.head
        count = 0
        while count < position - 1 and current.next != self.head:
            current = current.next
            count += 1
        if current.next == self.head or count != position - 1:
            print("Position out of bounds.")
            return
        current.next = current.next.next


# Example Usage
if __name__ == "__main__":
    cll = CircularLinkedList()

    # Insert nodes
    cll.insert_at_beginning(10)
    cll.insert_at_end(20)
    cll.insert_at_position(15, 1)  # Insert 15 at position 1
    cll.traverse()  # Output: 10 -> 15 -> 20 -> (back to head)

    # Delete nodes
    cll.delete_at_beginning()
    cll.traverse()  # Output: 15 -> 20 -> (back to head)
    cll.delete_at_end()
    cll.traverse()  # Output: 15 -> (back to head)
    cll.delete_at_position(0)
    cll.traverse()  # Output: The list is empty.
