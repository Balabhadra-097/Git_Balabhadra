# 6) Write an algorithm for implementation of doubly linked list (all operations).
class Node:
    """Class to represent a node in a doubly linked list."""
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None


class DoublyLinkedList:
    """Class to represent a doubly linked list."""
    def __init__(self):
        self.head = None

    def traverse_forward(self):
        """Traverse the list forward and print the elements."""
        current = self.head
        if not current:
            print("The list is empty.")
            return
        while current:
            print(current.data, end=" <-> ")
            current = current.next
        print("None")

    def traverse_backward(self):
        """Traverse the list backward and print the elements."""
        current = self.head
        if not current:
            print("The list is empty.")
            return
        # Move to the last node
        while current.next:
            current = current.next
        # Traverse backward
        while current:
            print(current.data, end=" <-> ")
            current = current.prev
        print("None")

    def add_at_beginning(self, data):
        """Add a node at the beginning of the list."""
        new_node = Node(data)
        if self.head:
            self.head.prev = new_node
        new_node.next = self.head
        self.head = new_node

    def add_at_end(self, data):
        """Add a node at the end of the list."""
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node
        new_node.prev = current

    def add_at_position(self, data, position):
        """Add a node at a specific position in the list."""
        if position == 0:
            self.add_at_beginning(data)
            return
        new_node = Node(data)
        current = self.head
        count = 0
        while current and count < position - 1:
            current = current.next
            count += 1
        if not current:
            print("Position out of bounds.")
            return
        new_node.next = current.next
        if current.next:
            current.next.prev = new_node
        new_node.prev = current
        current.next = new_node

    def delete_at_beginning(self):
        """Delete the node at the beginning of the list."""
        if not self.head:
            print("The list is empty. No node to delete.")
            return
        if not self.head.next:
            self.head = None
            return
        self.head = self.head.next
        self.head.prev = None

    def delete_at_end(self):
        """Delete the node at the end of the list."""
        if not self.head:
            print("The list is empty. No node to delete.")
            return
        if not self.head.next:
            self.head = None
            return
        current = self.head
        while current.next:
            current = current.next
        current.prev.next = None

    def delete_at_position(self, position):
        """Delete a node at a specific position in the list."""
        if not self.head:
            print("The list is empty. No node to delete.")
            return
        if position == 0:
            self.delete_at_beginning()
            return
        current = self.head
        count = 0
        while current and count < position:
            current = current.next
            count += 1
        if not current:
            print("Position out of bounds.")
            return
        if current.next:
            current.next.prev = current.prev
        if current.prev:
            current.prev.next = current.next


# Example Usage
if __name__ == "__main__":
    dll = DoublyLinkedList()
    
    # Add nodes to the list
    dll.add_at_beginning(10)
    dll.add_at_end(30)
    dll.add_at_position(20, 1)  # Add 20 at position 1
    dll.traverse_forward()  # Output: 10 <-> 20 <-> 30 <-> None
    dll.traverse_backward()  # Output: 30 <-> 20 <-> 10 <-> None

    # Delete nodes from the list
    dll.delete_at_beginning()
    dll.traverse_forward()  # Output: 20 <-> 30 <-> None
    dll.delete_at_end()
    dll.traverse_forward()  # Output: 20 <-> None
    dll.delete_at_position(0)
    dll.traverse_forward()  # Output: The list is empty.
