# 5) Write an algorithm for implementation of singly linked list and perform certain operation:- Traversing, addition (beginning, end, at any position), deletion (beginning, end, at any position)
class Node:
    """Class to represent a node in the singly linked list."""
    def __init__(self, data):
        self.data = data
        self.next = None


class SinglyLinkedList:
    """Class to represent a singly linked list."""
    def __init__(self):
        self.head = None

    def traverse(self):
        """Traverse and print the linked list."""
        current = self.head
        if not current:
            print("The list is empty.")
            return
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    def add_at_beginning(self, data):
        """Add a node at the beginning of the list."""
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def add_at_end(self, data):
        """Add a node at the end of the list."""
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def add_at_position(self, data, position):
        """Add a node at a specific position in the list."""
        if position == 0:
            self.add_at_beginning(data)
            return
        new_node = Node(data)
        current = self.head
        count = 0
        while current and count < position - 1:
            current = current.next
            count += 1
        if not current:
            print("Position out of bounds.")
            return
        new_node.next = current.next
        current.next = new_node

    def delete_at_beginning(self):
        """Delete the node at the beginning of the list."""
        if not self.head:
            print("The list is empty. No node to delete.")
            return
        self.head = self.head.next

    def delete_at_end(self):
        """Delete the node at the end of the list."""
        if not self.head:
            print("The list is empty. No node to delete.")
            return
        if not self.head.next:
            self.head = None
            return
        current = self.head
        while current.next and current.next.next:
            current = current.next
        current.next = None

    def delete_at_position(self, position):
        """Delete a node at a specific position in the list."""
        if not self.head:
            print("The list is empty. No node to delete.")
            return
        if position == 0:
            self.head = self.head.next
            return
        current = self.head
        count = 0
        while current.next and count < position - 1:
            current = current.next
            count += 1
        if not current.next:
            print("Position out of bounds.")
            return
        current.next = current.next.next


# Example Usage
if __name__ == "__main__":
    linked_list = SinglyLinkedList()
    
    # Add nodes to the list
    linked_list.add_at_beginning(10)
    linked_list.add_at_end(20)
    linked_list.add_at_position(15, 1)  # Add 15 at position 1
    linked_list.traverse()  # Output: 10 -> 15 -> 20 -> None

    # Delete nodes from the list
    linked_list.delete_at_beginning()
    linked_list.traverse()  # Output: 15 -> 20 -> None
    linked_list.delete_at_end()
    linked_list.traverse()  # Output: 15 -> None
    linked_list.delete_at_position(0)
    linked_list.traverse()  # Output: The list is empty.
---------------------------------------------------------------------------------------



